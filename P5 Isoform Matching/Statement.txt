This problem contains a lot of features, so reading original problem statement is recommended.


There are n reference and q request isoforms.
Each isoform is represented as some nonintersecting intervals (integer pairs).


Easy version:

Isoform A "contains" isoform B if A almost equal to B, except B is truncated from left and right, and B interval edges may shift by small value dt.

It is asked for each request isoform to find all (number of) reference isoforms that contain it.

n <= 5*10^5, q <= 5.5*10^5, number of intervals in isoform usually range from 1 to 25

Hard version:

score(isoform A, isoform B) = (2/3) * union(A, B) / len(a) + (1/3) * union(complement(A), complement(B)) / len(complement(A))

union(A, B) = size of the area covered by intervals from both A and B

complement(A = {(l_1;r_1), ..., (l_k, r_k)}) = {(r_1 + 1, l_2 - 1), ..., (r_k-1 + 1, l_k - 1)}

len(A = {(l_1;r_1), ..., (l_k, r_k)}) = sum i=[0;k] of (r_i - l_i + 1)

It is asked for each request isoform B to find the best reference isoform A_i that achieves max(score(B, A_i)).

n <= 3.2*10^5, q <= 6.8*10^5, number of intervals in isoform usually range from 1 to 10